{"version":3,"sources":["components/AxisY.js","components/Bars.js","components/Label.js","components/BarChart.js","components/AxisX.js","components/CountryDots.js","components/ScatterPlot.js","components/Tooltip.js","App.js","index.js"],"names":["AxisY","yScale","ticks","width","padding","format","map","tickValue","className","transform","x2","dx","dy","style","textAnchor","Bars","data","xScale","barWidth","tooltipRef","barPadding","height","tooltip","document","getElementById","d","i","x","y","data-value","id","onMouseMove","e","el","classList","add","left","pageX","top","pageY","innerHTML","target","Number","getAttribute","toLocaleString","showTooltip","onMouseLeave","remove","Label","labelText","rotate","title","BarChart","country","innerHeight","innerWidth","length","extent","minCountryPopulation","maxCountryPopulation","scaleLinear","domain","nice","range","yTicks","viewBox","preserveAspectRatio","text-anchor","AxisX","val","y2","CountryDots","rScale","handleCountryChange","data-fertility-rate","data-life-expectancy","data-population","cx","cy","pop","r","onClick","ScatterPlot","minFertilityRate","maxFertilityRate","minLifeExpectancy","maxLifeExpectancy","maxPopulation","xTicks","scaleSqrt","Tooltip","App","useState","setData","yearData","setYearData","countryData","setCountryData","year","setYear","setCountry","minYear","maxYear","useRef","max","useEffect","csv","then","sort","a","b","newYearData","filter","newCountryData","newCountry","fontWeight","type","min","onChange","newYear","value","handleYearChange","ref","ReactDOM","render"],"mappings":"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","file":"static/js/main.f3132f08.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst AxisY = ({ yScale, ticks, width, padding,format = null }) => {\r\n  return (\r\n    ticks.map(tickValue => {\r\n            return (\r\n              <g className=\"tick\" key={tickValue} transform = {`translate(${padding},${yScale(tickValue)})`}>\r\n                <line x2={width-padding} />              \r\n                <text dx={-15} dy={7} style={{textAnchor: \"end\"}}>{format ? format(tickValue) : tickValue}</text>\r\n              </g>\r\n            )\r\n          })\r\n  )\r\n}\r\n\r\nexport default AxisY\r\n","import React from 'react'\r\n\r\nconst Bars = ({data,padding, xScale, yScale,tooltipRef,barWidth,barPadding,height }) => {\r\n  const tooltip = document.getElementById(\"tooltip\")\r\n  const showTooltip = (e,el) => {\r\n    tooltip.classList.add(\"show\")\r\n    tooltip.style.left = `${e.pageX}px`\r\n    tooltip.style.top = `${e.pageY}px`\r\n    tooltip.innerHTML = `\r\n    <p class=\"country-title\">${e.target.id}<p/><p>Population: ${Number(e.target.getAttribute(\"data-value\")).toLocaleString()}</p>`\r\n  }\r\n\r\n  const hideTooltip = (e) => {\r\n    tooltip.classList.remove('show')\r\n  }\r\n\r\n  return (\r\n    <g className=\"bars\">\r\n      {data.map((d, i) => <rect x={xScale(i * (barWidth + barPadding))} y={yScale(d['Population'])} width={barWidth} height={height-yScale(d['Population'])} key={d[\"Year\"]} data-value={ d[\"Population\"]} id={d[\"Year\"]} onMouseMove={(e, el) => showTooltip(e, el)} onMouseLeave={(e) => hideTooltip(e)} />)}\r\n    </g>\r\n  )\r\n}\r\n\r\nexport default Bars\r\n","import React from 'react'\r\n\r\nconst Label = ({ x = 0, y = 0, labelText = \"\", rotate = false, title = false ,dy}) => {\r\n  return (\r\n    <text\r\n      className={`label ${title ? \"title\" : \"\"}`}\r\n      x={rotate ? 0 : x}\r\n      y={rotate ? 0 : y}\r\n      dy={ dy}\r\n      textAnchor=\"middle\"\r\n      transform = {rotate ? `translate(${x},${y}) rotate(${rotate ? -90 : 0})` : \"\"}\r\n    >\r\n      {labelText}\r\n    </text>\r\n  )\r\n}\r\n\r\nexport default Label\r\n","import { extent } from 'd3-array';\r\nimport { format } from 'd3-format';\r\nimport { scaleLinear, tickFormat } from 'd3-scale';\r\nimport React from 'react'\r\nimport AxisY from './AxisY';\r\nimport Bars from './Bars';\r\nimport Label from './Label';\r\n\r\nconst BarChart = ({ country,data,tooltipRef }) => {\r\n  const height = 700;\r\n  const width = 1000;\r\n  const padding = 70;\r\n\r\n  const innerHeight = height - padding;\r\n  const innerWidth = width - padding;\r\n  const barPadding = 0\r\n  const barWidth = innerWidth/data.length - barPadding\r\n\r\n  const [minCountryPopulation, maxCountryPopulation] = extent(data, d => +d['Population'])\r\n  \r\n\r\n  const xScale = scaleLinear().domain([0, width]).nice().range([padding, width])\r\n  const yScale = scaleLinear().domain([minCountryPopulation, maxCountryPopulation]).nice().range([innerHeight, padding])\r\n  \r\n  const xTicks = xScale.ticks()\r\n  const formatValue = format(\".2s\");\r\n  const yTicks = yScale.ticks(5)\r\n  const yFormat = (d) => {\r\n    return `${d/1000000} M`\r\n  }\r\n\r\n\r\n  if (data.length < 1) {\r\n    return (\r\n      <svg className=\"population-bar-chart\" viewBox={`0 0 ${width} ${height}`} preserveAspectRatio=\"xMidYMid meet\">\r\n        <text className=\"loading-text label\"  text-anchor=\"middle\"transform={`translate( ${innerWidth/2} ${innerHeight/2-40})`}>Click on a country's dot</text>\r\n        <text className=\"loading-text label\" text-anchor=\"middle\" transform={`translate( ${innerWidth/2} ${innerHeight/2})`}>to view their population growth </text>\r\n        <text className=\"loading-text label\" text-anchor=\"middle\" transform={`translate( ${innerWidth/2} ${innerHeight/2+40})`}>throughout the years</text>\r\n    </svg>\r\n    )\r\n  }\r\n  return (\r\n    <svg className=\"population-bar-chart\" viewBox={`0 0 ${width} ${height}`} preserveAspectRatio=\"xMidYMid meet\">\r\n      <g className=\"ticks\">\r\n        <AxisY ticks={yTicks} format={yFormat} yScale={yScale} padding={padding} width={innerWidth-padding} />\r\n      </g>\r\n\r\n      <Bars data={data} height={innerHeight} xScale={xScale} yScale={yScale} barWidth={barWidth} barPadding={barPadding} padding={padding} tooltipRef={tooltipRef} />\r\n      <Label\r\n        x={width / 2}\r\n        title={true}\r\n        y={padding -15}\r\n        labelText={ `${country} | Population Growth`}\r\n      />\r\n\r\n\r\n\r\n\r\n    </svg>\r\n    )\r\n}\r\n\r\nexport default BarChart\r\n","\r\nimport React from 'react'\r\n\r\nconst AxisX = ({ticks,xScale,padding,height}) => {\r\n\r\n  return (\r\n    ticks.map(val => {\r\n      return (\r\n        <g\r\n          key={val}\r\n          className=\"tick\"\r\n          transform={`translate (${xScale(val)} ${height})`}\r\n        >\r\n          <line  y2={-(height-padding)}/>\r\n          <text dx={0} dy=\"1.82em\" style={{textAnchor: \"middle\"}}>{val}</text>\r\n        </g>\r\n      )\r\n    })\r\n    // <></>\r\n    )\r\n\r\n}\r\n\r\nexport default AxisX\r\n","import React from 'react'\r\n\r\nconst CountryDots = ({ data, xScale, yScale, rScale, tooltipRef, handleCountryChange, country }) => {\r\n  const tooltip = document.getElementById(\"tooltip\")\r\n  const showTooltip = (e,el) => {\r\n    tooltip.classList.add(\"show\")\r\n    tooltip.style.left = `${e.pageX}px`\r\n    tooltip.style.top = `${e.pageY}px`\r\n    tooltip.innerHTML = `\r\n    <p class=\"country-title\">${e.target.id}<p/><p>Population: ${Number(e.target.getAttribute(\"data-population\")).toLocaleString()}</p><p>Life Expectancy: ${Number(e.target.getAttribute(\"data-life-expectancy\")).toLocaleString()}</p><p>Fertility Rate: ${Number(e.target.getAttribute(\"data-fertility-rate\")).toLocaleString()}</p>`\r\n  }\r\n\r\n  const hideTooltip = (e) => {\r\n    tooltip.classList.remove('show')\r\n  }\r\n  return (\r\n    <g className=\"country-dots\">\r\n      {data.map(d => <circle className={country===d['Entity'] ? \"dot selected-country\" : \"dot \"}key={d[\"Entity\"]} id={d[\"Entity\"]} data-fertility-rate={d['Fertility Rate']} data-life-expectancy={d[\"Life Expectancy\"]} data-population={d['Population']} onMouseMove={(e, el) => showTooltip(e, el)} onMouseLeave={(e) => hideTooltip(e)} cx={xScale(d[\"Fertility Rate\"])} cy={yScale(d[\"Life Expectancy\"])} pop={d[\"Population\"]} r={rScale(d[\"Population\"])} onClick={(e) => handleCountryChange(e)}/>)}\r\n    </g>\r\n  )\r\n}\r\n\r\nexport default CountryDots\r\n","import { scaleLinear, scaleSqrt } from 'd3-scale';\r\nimport React from 'react'\r\nimport AxisX from './AxisX';\r\nimport AxisY from './AxisY';\r\nimport CountryDots from './CountryDots';\r\nimport Label from './Label';\r\n\r\nconst ScatterPlot = ({ data,minFertilityRate, maxFertilityRate,minLifeExpectancy,maxLifeExpectancy,maxPopulation,tooltipRef,handleCountryChange,country}) => {\r\n\r\n  if (!data) {\r\n    return <p>Loading...</p>\r\n  }\r\n\r\n\r\n  const height = 1200;\r\n  const width = 1600;\r\n  const padding = 130;\r\n  const innerHeight = height - padding;\r\n  const innerWidth = width - padding;\r\n\r\n  const xScale = scaleLinear().domain([minFertilityRate, maxFertilityRate]).nice().range([padding, innerWidth])\r\n  const xTicks = xScale.ticks()\r\n  const yScale = scaleLinear().domain([minLifeExpectancy,maxLifeExpectancy]).nice().range([innerHeight,padding])\r\n  const yTicks = yScale.ticks()\r\n\r\n  const rScale = scaleSqrt().domain([0,maxPopulation]).range([5,18])\r\n  \r\n\r\n  return (\r\n    <svg className=\"population-scatter-plot\" viewBox={`0 0 ${width} ${height}`}>\r\n\r\n      <g className=\"ticks\">\r\n        <AxisX ticks={xTicks} xScale={xScale} padding={padding} height={innerHeight} />\r\n      </g>\r\n      <Label\r\n        x={width / 2}\r\n        y={innerHeight+padding/3}\r\n        dy=\"1.2em\"\r\n        labelText=\"Fertility Rate\"\r\n      />\r\n\r\n      <g className=\"ticks\">\r\n        <AxisY ticks={yTicks} yScale={yScale} padding={padding} width={innerWidth} />\r\n      </g>\r\n      <Label\r\n        x={padding/3}\r\n        y={height / 2}\r\n        dy=\".82em\"\r\n        rotate={true}\r\n        labelText=\"Life Expectancy at Birth\"\r\n      />\r\n      \r\n\r\n      <CountryDots country={country} data={data} xScale={xScale} yScale={yScale} rScale={rScale} tooltipRef={tooltipRef} handleCountryChange={(e) =>handleCountryChange(e)}/>\r\n\r\n      <Label\r\n        x={width / 2}\r\n        title={true}\r\n        y={padding/2}\r\n        labelText=\"Country Population, Life Expectancy, and Fertility Rate throughout the Years\"\r\n      />\r\n    </svg>\r\n  )\r\n}\r\n\r\nexport default ScatterPlot\r\n","import React from 'react'\r\n\r\nconst Tooltip = () => {\r\n  return (\r\n    <div className=\"tooltip\" id=\"tooltip\">\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Tooltip\r\n","import { extent, max } from \"d3-array\";\r\nimport { csv } from \"d3-fetch\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport BarChart from \"./components/BarChart\";\r\nimport Map from \"./components/Map\";\r\nimport ScatterPlot from \"./components/ScatterPlot\";\r\nimport Tooltip from \"./components/Tooltip\";\r\nimport countryMap from './countries.json'\r\n\r\nfunction App() {\r\n  const [data, setData] = useState([]);\r\n  const [yearData, setYearData] = useState([]);\r\n  const [countryData, setCountryData] = useState([]);\r\n  const [year, setYear] = useState(1961);\r\n  const [country, setCountry] = useState(\"USA\");\r\n  const [minYear,maxYear] = extent(data,(d) => d[\"Year\"])\r\n  const tooltipRef = useRef();\r\n\r\n\r\n  const [minFertilityRate,maxFertilityRate] = extent(data, d => +d[\"Fertility Rate\"])\r\n  const [minLifeExpectancy, maxLifeExpectancy] = extent(data, d => +d[\"Life Expectancy\"])\r\n\r\n  const maxPopulation = max(data, d => d[\"Population\"])\r\n\r\n  const dataURL = \"https://gist.githubusercontent.com/ShrikeFound/39a8fd3db574ec9f5d10074840c098bd/raw\"\r\n  useEffect(() => {\r\n    csv(dataURL).then(data => setData(data.sort((a, b) => {\r\n      return  +b['Population'] - +a['Population']\r\n\r\n    })))\r\n  }, [])\r\n  //get yearly data for scatter plot\r\n  useEffect(() => {\r\n    if (data) {\r\n      const newYearData = data.filter(d => {\r\n        return Number(d[\"Year\"]) == year\r\n      })\r\n      setYearData(newYearData)\r\n     }\r\n\r\n  }, [data, year])\r\n  \r\n  //get country data for bar chart\r\n  useEffect(() => {\r\n    if (data) {\r\n      const newCountryData = data.filter(d => {\r\n        return d[\"Entity\"] == country\r\n      })\r\n      setCountryData(newCountryData.sort((a, b) => {\r\n        return +a['Year'] - +b['Year']\r\n      }))\r\n     }\r\n\r\n  }, [data,country])\r\n\r\n  const handleYearChange = (e) => {\r\n    const newYear = e.target.value\r\n    setYear(newYear)\r\n  }\r\n\r\n\r\n  const handleCountryChange = (e) => {\r\n    const newCountry = e.target.id\r\n    setCountry(newCountry)\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1 className=\"title\">Country Metric Dashboard</h1>\r\n      <div className=\"dashboard\">\r\n        \r\n        <div className=\"scatterplot-container\">\r\n          <ScatterPlot data={yearData} country={country} tooltipRef={tooltipRef} minFertilityRate={minFertilityRate} maxFertilityRate={maxFertilityRate} handleCountryChange={(e) => handleCountryChange(e)} maxLifeExpectancy={maxLifeExpectancy} minLifeExpectancy={minLifeExpectancy} maxPopulation={maxPopulation} />\r\n        </div>\r\n        \r\n        <div className=\"year-input\">\r\n          <p>This dashboard is inspired Hans Rosling's first TED talk and explores many of the same areas using modern data: Country population growth, life expectancy, and fertility rates (Short life Big family vs. Long life Small family). </p>\r\n          <p> Take a look at the UN's most recent data on history country growth and explore the relationship between these metrics yourself. Use the slider below to travel through time and click on a country's dot to view their data on the chart below.</p>\r\n          <h2 style={{ fontWeight: \"400\" }}>Year: {year}</h2>\r\n          <input type=\"range\" min={minYear} max={maxYear} onChange={(e) => handleYearChange(e)} />\r\n        </div>\r\n        \r\n        <div className=\"barchart-container\">\r\n          <BarChart country={country} data={countryData} />\r\n        </div>\r\n        \r\n      </div>\r\n      <Tooltip ref={tooltipRef} />\r\n\r\n\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./style.scss\";\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}