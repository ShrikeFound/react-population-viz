{"version":3,"sources":["components/AxisY.js","components/Bars.js","components/Label.js","components/BarChart.js","components/AxisX.js","components/CountryDots.js","components/ScatterPlot.js","components/Tooltip.js","App.js","index.js"],"names":["AxisY","yScale","ticks","width","padding","format","map","tickValue","className","transform","x2","dx","dy","style","textAnchor","Bars","data","xScale","barWidth","tooltipRef","barPadding","height","tooltip","document","getElementById","d","i","x","y","id","onMouseMove","e","el","classList","add","left","pageX","top","pageY","innerHTML","target","Number","getAttribute","toLocaleString","showTooltip","onMouseLeave","remove","Label","labelText","rotate","title","BarChart","country","innerHeight","innerWidth","length","extent","minCountryPopulation","maxCountryPopulation","scaleLinear","domain","nice","range","yTicks","viewBox","preserveAspectRatio","AxisX","val","y2","CountryDots","rScale","handleCountryChange","cx","cy","pop","r","onClick","ScatterPlot","minFertilityRate","maxFertilityRate","minLifeExpectancy","maxLifeExpectancy","maxPopulation","xTicks","scaleSqrt","Tooltip","App","useState","setData","yearData","setYearData","countryData","setCountryData","year","setYear","setCountry","minYear","maxYear","useRef","max","useEffect","csv","then","sort","a","b","newYearData","filter","newCountryData","newCountry","fontWeight","type","min","onChange","newYear","value","handleYearChange","ref","ReactDOM","render"],"mappings":"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","file":"static/js/main.d8d33ead.chunk.js","sourcesContent":["import React from 'react'\n\nconst AxisY = ({ yScale, ticks, width, padding,format = null }) => {\n  return (\n    ticks.map(tickValue => {\n            return (\n              <g className=\"tick\" key={tickValue} transform = {`translate(${padding},${yScale(tickValue)})`}>\n                <line x2={width-padding} />              \n                <text dx={-15} dy={7} style={{textAnchor: \"end\"}}>{format ? format(tickValue) : tickValue}</text>\n              </g>\n            )\n          })\n  )\n}\n\nexport default AxisY\n","import React from 'react'\n\nconst Bars = ({data,padding, xScale, yScale,tooltipRef,barWidth,barPadding,height }) => {\n  const tooltip = document.getElementById(\"tooltip\")\n  const showTooltip = (e,el) => {\n    tooltip.classList.add(\"show\")\n    tooltip.style.left = `${e.pageX}px`\n    tooltip.style.top = `${e.pageY}px`\n    tooltip.innerHTML = `\n    <p class=\"country-title\">${e.target.id}<p/><p>Population: ${Number(e.target.getAttribute(\"data-value\")).toLocaleString()}</p>`\n  }\n\n  const hideTooltip = (e) => {\n    tooltip.classList.remove('show')\n  }\n\n  return (\n    <g className=\"bars\">\n      {data.map((d, i) => <rect x={xScale(i * (barWidth + barPadding))} y={yScale(d['Population'])} width={barWidth} height={height-yScale(d['Population'])} key={d[\"Year\"]} data-value={ d[\"Population\"]} id={d[\"Year\"]} onMouseMove={(e, el) => showTooltip(e, el)} onMouseLeave={(e) => hideTooltip(e)} />)}\n    </g>\n  )\n}\n\nexport default Bars\n","import React from 'react'\n\nconst Label = ({ x = 0, y = 0, labelText = \"\", rotate = false, title = false ,dy}) => {\n  return (\n    <text\n      className={`label ${title ? \"title\" : \"\"}`}\n      x={rotate ? 0 : x}\n      y={rotate ? 0 : y}\n      dy={ dy}\n      textAnchor=\"middle\"\n      transform = {rotate ? `translate(${x},${y}) rotate(${rotate ? -90 : 0})` : \"\"}\n    >\n      {labelText}\n    </text>\n  )\n}\n\nexport default Label\n","import { extent } from 'd3-array';\nimport { format } from 'd3-format';\nimport { scaleLinear, tickFormat } from 'd3-scale';\nimport React from 'react'\nimport AxisY from './AxisY';\nimport Bars from './Bars';\nimport Label from './Label';\n\nconst BarChart = ({ country,data,tooltipRef }) => {\n  const height = 700;\n  const width = 1000;\n  const padding = 70;\n\n  const innerHeight = height - padding;\n  const innerWidth = width - padding;\n  const barPadding = 0\n  const barWidth = innerWidth/data.length - barPadding\n\n  const [minCountryPopulation, maxCountryPopulation] = extent(data, d => +d['Population'])\n  \n\n  const xScale = scaleLinear().domain([0, width]).nice().range([padding, width])\n  const yScale = scaleLinear().domain([minCountryPopulation, maxCountryPopulation]).nice().range([innerHeight, padding])\n  \n  const xTicks = xScale.ticks()\n  const formatValue = format(\".2s\");\n  const yTicks = yScale.ticks(5)\n  const yFormat = (d) => {\n    return `${d/1000000} M`\n  }\n\n\n  if (data.length < 1) {\n    return (\n      <svg className=\"population-bar-chart\" viewBox={`0 0 ${width} ${height}`} preserveAspectRatio=\"xMidYMid meet\">\n        <text className=\"loading-text label\"  text-anchor=\"middle\"transform={`translate( ${innerWidth/2} ${innerHeight/2-40})`}>Click on a country's dot</text>\n        <text className=\"loading-text label\" text-anchor=\"middle\" transform={`translate( ${innerWidth/2} ${innerHeight/2})`}>to view their population growth </text>\n        <text className=\"loading-text label\" text-anchor=\"middle\" transform={`translate( ${innerWidth/2} ${innerHeight/2+40})`}>throughout the years</text>\n    </svg>\n    )\n  }\n  return (\n    <svg className=\"population-bar-chart\" viewBox={`0 0 ${width} ${height}`} preserveAspectRatio=\"xMidYMid meet\">\n      <g className=\"ticks\">\n        <AxisY ticks={yTicks} format={yFormat} yScale={yScale} padding={padding} width={innerWidth-padding} />\n      </g>\n\n      <Bars data={data} height={innerHeight} xScale={xScale} yScale={yScale} barWidth={barWidth} barPadding={barPadding} padding={padding} tooltipRef={tooltipRef} />\n      <Label\n        x={width / 2}\n        title={true}\n        y={padding -15}\n        labelText={ `${country} | Population Growth`}\n      />\n\n\n\n\n    </svg>\n    )\n}\n\nexport default BarChart\n","\nimport React from 'react'\n\nconst AxisX = ({ticks,xScale,padding,height}) => {\n\n  return (\n    ticks.map(val => {\n      return (\n        <g\n          key={val}\n          className=\"tick\"\n          transform={`translate (${xScale(val)} ${height})`}\n        >\n          <line  y2={-(height-padding)}/>\n          <text dx={0} dy=\"1.82em\" style={{textAnchor: \"middle\"}}>{val}</text>\n        </g>\n      )\n    })\n    // <></>\n    )\n\n}\n\nexport default AxisX\n","import React from 'react'\n\nconst CountryDots = ({ data, xScale, yScale, rScale, tooltipRef, handleCountryChange, country }) => {\n  const tooltip = document.getElementById(\"tooltip\")\n  const showTooltip = (e,el) => {\n    tooltip.classList.add(\"show\")\n    tooltip.style.left = `${e.pageX}px`\n    tooltip.style.top = `${e.pageY}px`\n    tooltip.innerHTML = `\n    <p class=\"country-title\">${e.target.id}<p/><p>Population: ${Number(e.target.getAttribute(\"data-population\")).toLocaleString()}</p><p>Life Expectancy: ${Number(e.target.getAttribute(\"data-life-expectancy\")).toLocaleString()}</p><p>Fertility Rate: ${Number(e.target.getAttribute(\"data-fertility-rate\")).toLocaleString()}</p>`\n  }\n\n  const hideTooltip = (e) => {\n    tooltip.classList.remove('show')\n  }\n  return (\n    <g className=\"country-dots\">\n      {data.map(d => <circle className={country===d['Entity'] ? \"dot selected-country\" : \"dot \"}key={d[\"Entity\"]} id={d[\"Entity\"]} data-fertility-rate={d['Fertility Rate']} data-life-expectancy={d[\"Life Expectancy\"]} data-population={d['Population']} onMouseMove={(e, el) => showTooltip(e, el)} onMouseLeave={(e) => hideTooltip(e)} cx={xScale(d[\"Fertility Rate\"])} cy={yScale(d[\"Life Expectancy\"])} pop={d[\"Population\"]} r={rScale(d[\"Population\"])} onClick={(e) => handleCountryChange(e)}/>)}\n    </g>\n  )\n}\n\nexport default CountryDots\n","import { scaleLinear, scaleSqrt } from 'd3-scale';\nimport React from 'react'\nimport AxisX from './AxisX';\nimport AxisY from './AxisY';\nimport CountryDots from './CountryDots';\nimport Label from './Label';\n\nconst ScatterPlot = ({ data,minFertilityRate, maxFertilityRate,minLifeExpectancy,maxLifeExpectancy,maxPopulation,tooltipRef,handleCountryChange,country}) => {\n\n  if (!data) {\n    return <p>Loading...</p>\n  }\n\n\n  const height = 1200;\n  const width = 1600;\n  const padding = 130;\n  const innerHeight = height - padding;\n  const innerWidth = width - padding;\n\n  const xScale = scaleLinear().domain([minFertilityRate, maxFertilityRate]).nice().range([padding, innerWidth])\n  const xTicks = xScale.ticks()\n  const yScale = scaleLinear().domain([minLifeExpectancy,maxLifeExpectancy]).nice().range([innerHeight,padding])\n  const yTicks = yScale.ticks()\n\n  const rScale = scaleSqrt().domain([0,maxPopulation]).range([5,18])\n  \n\n  return (\n    <svg className=\"population-scatter-plot\" viewBox={`0 0 ${width} ${height}`}>\n\n      <g className=\"ticks\">\n        <AxisX ticks={xTicks} xScale={xScale} padding={padding} height={innerHeight} />\n      </g>\n      <Label\n        x={width / 2}\n        y={innerHeight+padding/3}\n        dy=\"1.2em\"\n        labelText=\"Fertility Rate\"\n      />\n\n      <g className=\"ticks\">\n        <AxisY ticks={yTicks} yScale={yScale} padding={padding} width={innerWidth} />\n      </g>\n      <Label\n        x={padding/3}\n        y={height / 2}\n        dy=\".82em\"\n        rotate={true}\n        labelText=\"Life Expectancy at Birth\"\n      />\n      \n\n      <CountryDots country={country} data={data} xScale={xScale} yScale={yScale} rScale={rScale} tooltipRef={tooltipRef} handleCountryChange={(e) =>handleCountryChange(e)}/>\n\n      <Label\n        x={width / 2}\n        title={true}\n        y={padding/2}\n        labelText=\"Country Population, Life Expectancy, and Fertility Rate throughout the Years\"\n      />\n    </svg>\n  )\n}\n\nexport default ScatterPlot\n","import React from 'react'\n\nconst Tooltip = () => {\n  return (\n    <div className=\"tooltip\" id=\"tooltip\">\n      \n    </div>\n  )\n}\n\nexport default Tooltip\n","import { extent, max } from \"d3-array\";\nimport { csv } from \"d3-fetch\";\nimport { useEffect, useRef, useState } from \"react\";\nimport BarChart from \"./components/BarChart\";\nimport Map from \"./components/Map\";\nimport ScatterPlot from \"./components/ScatterPlot\";\nimport Tooltip from \"./components/Tooltip\";\nimport countryMap from './countries.json'\n\nfunction App() {\n  const [data, setData] = useState([]);\n  const [yearData, setYearData] = useState([]);\n  const [countryData, setCountryData] = useState([]);\n  const [year, setYear] = useState(1961);\n  const [country, setCountry] = useState(\"USA\");\n  const [minYear,maxYear] = extent(data,(d) => d[\"Year\"])\n  const tooltipRef = useRef();\n\n\n  const [minFertilityRate,maxFertilityRate] = extent(data, d => +d[\"Fertility Rate\"])\n  const [minLifeExpectancy, maxLifeExpectancy] = extent(data, d => +d[\"Life Expectancy\"])\n\n  const maxPopulation = max(data, d => d[\"Population\"])\n\n  const dataURL = \"https://gist.githubusercontent.com/ShrikeFound/39a8fd3db574ec9f5d10074840c098bd/raw\"\n  useEffect(() => {\n    csv(dataURL).then(data => setData(data.sort((a, b) => {\n      return  +b['Population'] - +a['Population']\n\n    })))\n  }, [])\n  //get yearly data for scatter plot\n  useEffect(() => {\n    if (data) {\n      const newYearData = data.filter(d => {\n        return Number(d[\"Year\"]) == year\n      })\n      setYearData(newYearData)\n     }\n\n  }, [data, year])\n  \n  //get country data for bar chart\n  useEffect(() => {\n    if (data) {\n      const newCountryData = data.filter(d => {\n        return d[\"Entity\"] == country\n      })\n      setCountryData(newCountryData.sort((a, b) => {\n        return +a['Year'] - +b['Year']\n      }))\n     }\n\n  }, [data,country])\n\n  const handleYearChange = (e) => {\n    const newYear = e.target.value\n    setYear(newYear)\n  }\n\n\n  const handleCountryChange = (e) => {\n    const newCountry = e.target.id\n    setCountry(newCountry)\n  }\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"title\">Country Metric Dashboard</h1>\n      <div className=\"dashboard\">\n        \n        <div className=\"scatterplot-container\">\n          <ScatterPlot data={yearData} country={country} tooltipRef={tooltipRef} minFertilityRate={minFertilityRate} maxFertilityRate={maxFertilityRate} handleCountryChange={(e) => handleCountryChange(e)} maxLifeExpectancy={maxLifeExpectancy} minLifeExpectancy={minLifeExpectancy} maxPopulation={maxPopulation} />\n        </div>\n        \n        <div className=\"year-input\">\n          <p>This dashboard is inspired Hans Rosling's first TED talk and explores many of the same areas using modern data: Country population growth, life expectancy, and fertility rates (Short life Big family vs. Long life Small family). </p>\n          <p> Take a look at the UN's most recent data on history country growth and explore the relationship between these metrics yourself. Use the slider below to travel through time and click on a country's dot to view their data on the chart below.</p>\n          <h2 style={{ fontWeight: \"400\" }}>Year: {year}</h2>\n          <input type=\"range\" min={minYear} max={maxYear} onChange={(e) => handleYearChange(e)} />\n        </div>\n        \n        <div className=\"barchart-container\">\n          <BarChart country={country} data={countryData} />\n        </div>\n        \n      </div>\n      <Tooltip ref={tooltipRef} />\n\n\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./style.scss\";\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}